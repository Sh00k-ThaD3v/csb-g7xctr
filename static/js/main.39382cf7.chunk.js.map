{"version":3,"sources":["index.js"],"names":["Plane","color","props","usePlane","ref","receiveShadow","attach","args","Box","useBox","mass","isKinematic","api","useFrame","state","t","clock","getElapsedTime","position","set","Math","sin","cos","rotation","castShadow","side","THREE","InstancedSpheres","number","map","useLoader","useSphere","index","random","colors","useMemo","array","Float32Array","i","niceColors","floor","convertSRGBToLinear","toArray","attachObject","vertexColors","normalMap","normalScale","normalMap-wrapS","normalMap-wrapT","normalMap-repeat","ReactDOM","render","concurrent","shadowMap","sRGB","gl","alpha","camera","intensity","angle","penumbra","shadow-mapSize-width","shadow-mapSize-height","gravity","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.39382cf7.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { Suspense, useMemo } from 'react'\nimport { Canvas, useFrame, useLoader } from 'react-three-fiber'\nimport { Physics, useBox, usePlane, useSphere } from 'use-cannon'\nimport niceColors from 'nice-color-palettes'\nimport './styles.css'\n\nfunction Plane({ color, ...props }) {\n  const [ref] = usePlane(() => ({ ...props }))\n  return (\n    <mesh ref={ref} receiveShadow>\n      <planeBufferGeometry attach=\"geometry\" args={[1000, 1000]} />\n      <meshPhongMaterial attach=\"material\" color={color} />\n    </mesh>\n  )\n}\n\nfunction Box() {\n  const [ref, api] = useBox(() => ({ mass: 1, args: [4, 4, 4], isKinematic: true }))\n  useFrame((state) => {\n    const t = state.clock.getElapsedTime()\n    api.position.set(Math.sin(t * 2) * 5, Math.cos(t * 2) * 5, 3)\n    api.rotation.set(Math.sin(t * 6), Math.cos(t * 6), 0)\n  })\n  return (\n    <mesh ref={ref} castShadow receiveShadow>\n      <boxBufferGeometry attach=\"geometry\" args={[4, 4, 4]} />\n      <meshLambertMaterial attach=\"material\" color=\"white\" side={THREE.DoubleSide} />\n    </mesh>\n  )\n}\n\nfunction InstancedSpheres({ number = 100 }) {\n  const map = useLoader(THREE.TextureLoader, '/carbon_normal.jpg')\n  const [ref] = useSphere((index) => ({\n    mass: 1,\n    position: [Math.random() - 0.5, Math.random() - 0.5, index * 2],\n    args: 1\n  }))\n  const colors = useMemo(() => {\n    const array = new Float32Array(number * 3)\n    const color = new THREE.Color()\n    for (let i = 0; i < number; i++)\n      color\n        .set(niceColors[17][Math.floor(Math.random() * 5)])\n        .convertSRGBToLinear()\n        .toArray(array, i * 3)\n    return array\n  }, [number])\n  return (\n    <instancedMesh ref={ref} castShadow receiveShadow args={[null, null, number]}>\n      <sphereBufferGeometry attach=\"geometry\" args={[1, 16, 16]}>\n        <instancedBufferAttribute attachObject={['attributes', 'color']} args={[colors, 3]} />\n      </sphereBufferGeometry>\n      <meshPhongMaterial\n        attach=\"material\"\n        vertexColors={THREE.VertexColors}\n        normalMap={map}\n        normalScale={[1, 1]}\n        normalMap-wrapS={THREE.RepeatWrapping}\n        normalMap-wrapT={THREE.RepeatWrapping}\n        normalMap-repeat={[10, 10]}\n      />\n    </instancedMesh>\n  )\n}\n\nReactDOM.render(\n  <Canvas concurrent shadowMap sRGB gl={{ alpha: false }} camera={{ position: [0, -12, 16] }}>\n    <hemisphereLight intensity={0.35} />\n    <spotLight position={[30, 0, 30]} angle={0.3} penumbra={1} intensity={2} castShadow shadow-mapSize-width={256} shadow-mapSize-height={256} />\n    <pointLight position={[-30, 0, -30]} intensity={0.5} />\n    <Physics gravity={[0, 0, -30]}>\n      <Plane color={niceColors[17][4]} />\n      <Plane color={niceColors[17][1]} position={[-6, 0, 0]} rotation={[0, 0.9, 0]} />\n      <Plane color={niceColors[17][2]} position={[6, 0, 0]} rotation={[0, -0.9, 0]} />\n      <Plane color={niceColors[17][3]} position={[0, 0, 0]} rotation={[0.9, 0, 0]} />\n      <Plane color={niceColors[17][0]} position={[0, -6, 0]} rotation={[-0.9, 0, 0]} />\n      <Box />\n      <Suspense fallback={null}>\n        <InstancedSpheres number={100} />\n      </Suspense>\n    </Physics>\n  </Canvas>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}